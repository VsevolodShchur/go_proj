// Code generated by MockGen. DO NOT EDIT.
// Source: service/notes/notes.go

// Package mock_notes is a generated GoMock package.
package mock_notes

import (
	domain "proj/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotesRepo is a mock of NotesRepo interface.
type MockNotesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotesRepoMockRecorder
}

// MockNotesRepoMockRecorder is the mock recorder for MockNotesRepo.
type MockNotesRepoMockRecorder struct {
	mock *MockNotesRepo
}

// NewMockNotesRepo creates a new mock instance.
func NewMockNotesRepo(ctrl *gomock.Controller) *MockNotesRepo {
	mock := &MockNotesRepo{ctrl: ctrl}
	mock.recorder = &MockNotesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesRepo) EXPECT() *MockNotesRepoMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNotesRepo) CreateNote(note *domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNotesRepoMockRecorder) CreateNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNotesRepo)(nil).CreateNote), note)
}

// DeleteNote mocks base method.
func (m *MockNotesRepo) DeleteNote(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNotesRepoMockRecorder) DeleteNote(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNotesRepo)(nil).DeleteNote), ID)
}

// GetNote mocks base method.
func (m *MockNotesRepo) GetNote(ID string) (*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ID)
	ret0, _ := ret[0].(*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNotesRepoMockRecorder) GetNote(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNotesRepo)(nil).GetNote), ID)
}

// ListUserNotes mocks base method.
func (m *MockNotesRepo) ListUserNotes(userID string) ([]*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserNotes", userID)
	ret0, _ := ret[0].([]*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserNotes indicates an expected call of ListUserNotes.
func (mr *MockNotesRepoMockRecorder) ListUserNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserNotes", reflect.TypeOf((*MockNotesRepo)(nil).ListUserNotes), userID)
}

// UpdateNote mocks base method.
func (m *MockNotesRepo) UpdateNote(ID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNotesRepoMockRecorder) UpdateNote(ID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNotesRepo)(nil).UpdateNote), ID, text)
}
