// Code generated by MockGen. DO NOT EDIT.
// Source: transport/http/notes.go

// Package mock_http is a generated GoMock package.
package mock_http

import (
	domain "proj/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotesService is a mock of NotesService interface.
type MockNotesService struct {
	ctrl     *gomock.Controller
	recorder *MockNotesServiceMockRecorder
}

// MockNotesServiceMockRecorder is the mock recorder for MockNotesService.
type MockNotesServiceMockRecorder struct {
	mock *MockNotesService
}

// NewMockNotesService creates a new mock instance.
func NewMockNotesService(ctrl *gomock.Controller) *MockNotesService {
	mock := &MockNotesService{ctrl: ctrl}
	mock.recorder = &MockNotesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesService) EXPECT() *MockNotesServiceMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNotesService) CreateNote(text, userID string) (*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", text, userID)
	ret0, _ := ret[0].(*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNotesServiceMockRecorder) CreateNote(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNotesService)(nil).CreateNote), text, userID)
}

// DeleteNote mocks base method.
func (m *MockNotesService) DeleteNote(userID, noteID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", userID, noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNotesServiceMockRecorder) DeleteNote(userID, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNotesService)(nil).DeleteNote), userID, noteID)
}

// GetNote mocks base method.
func (m *MockNotesService) GetNote(ID string) (*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ID)
	ret0, _ := ret[0].(*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNotesServiceMockRecorder) GetNote(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNotesService)(nil).GetNote), ID)
}

// ListUserNotes mocks base method.
func (m *MockNotesService) ListUserNotes(userID string) ([]*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserNotes", userID)
	ret0, _ := ret[0].([]*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserNotes indicates an expected call of ListUserNotes.
func (mr *MockNotesServiceMockRecorder) ListUserNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserNotes", reflect.TypeOf((*MockNotesService)(nil).ListUserNotes), userID)
}

// UpdateNote mocks base method.
func (m *MockNotesService) UpdateNote(userID, noteID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", userID, noteID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNotesServiceMockRecorder) UpdateNote(userID, noteID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNotesService)(nil).UpdateNote), userID, noteID, text)
}
