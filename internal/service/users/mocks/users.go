// Code generated by MockGen. DO NOT EDIT.
// Source: service/users/users.go

// Package mock_users is a generated GoMock package.
package mock_users

import (
	domain "proj/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersRepo) CreateUser(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersRepoMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersRepo)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUsersRepo) DeleteUser(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersRepoMockRecorder) DeleteUser(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersRepo)(nil).DeleteUser), ID)
}

// GetUser mocks base method.
func (m *MockUsersRepo) GetUser(ID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersRepoMockRecorder) GetUser(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersRepo)(nil).GetUser), ID)
}

// MockNotesRepo is a mock of NotesRepo interface.
type MockNotesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotesRepoMockRecorder
}

// MockNotesRepoMockRecorder is the mock recorder for MockNotesRepo.
type MockNotesRepoMockRecorder struct {
	mock *MockNotesRepo
}

// NewMockNotesRepo creates a new mock instance.
func NewMockNotesRepo(ctrl *gomock.Controller) *MockNotesRepo {
	mock := &MockNotesRepo{ctrl: ctrl}
	mock.recorder = &MockNotesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesRepo) EXPECT() *MockNotesRepoMockRecorder {
	return m.recorder
}

// ListUserNotes mocks base method.
func (m *MockNotesRepo) ListUserNotes(userID string) ([]*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserNotes", userID)
	ret0, _ := ret[0].([]*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserNotes indicates an expected call of ListUserNotes.
func (mr *MockNotesRepoMockRecorder) ListUserNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserNotes", reflect.TypeOf((*MockNotesRepo)(nil).ListUserNotes), userID)
}
